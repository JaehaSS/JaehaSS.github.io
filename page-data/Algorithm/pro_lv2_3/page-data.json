{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Algorithm/pro_lv2_3/",
    "result": {"data":{"cur":{"id":"f973912e-a288-5cb5-a692-c7c501be1df4","html":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    visited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        v <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                result <span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> wires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> n\n    graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">for</span> v1<span class=\"token punctuation\">,</span>v2 <span class=\"token keyword\">in</span> wires<span class=\"token punctuation\">:</span>\n        graph<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span>\n        graph<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">for</span> start<span class=\"token punctuation\">,</span>not_visit <span class=\"token keyword\">in</span> wires<span class=\"token punctuation\">:</span>\n        visitied <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        visitied<span class=\"token punctuation\">[</span>not_visit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        result <span class=\"token operator\">=</span> bfs<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>graph<span class=\"token punctuation\">,</span> visitied<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> answer<span class=\"token punctuation\">:</span>\n            answer <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">return</span> answer\n</code></pre></div>","excerpt":"","frontmatter":{"date":"September 25, 2022","title":"프로그래머스 전력망을 둘로 나누기 python","categories":"알고리즘","author":"째하","emoji":"🧢"},"fields":{"slug":"/Algorithm/pro_lv2_3/"}},"next":{"id":"d3698120-7cd7-55aa-b48f-84dbb4394d7c","html":"<p>answer = 0</p>\n<p>def dfs(k, cnt, dungeons, visited):\nglobal answer\nif cnt > answer:\nanswer = cnt</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for i in range(len(dungeons)):\n    # 방문하지 않고 현재 피로다가 최소피로도보다 높을 때\n    if not visited[i] and k >= dungeons[i][0]:\n        visited[i] = 1\n        dfs(k - dungeons[i][1], cnt + 1, dungeons, visited)\n        visited[i] = 0\n    </code></pre></div>\n<p>def solution(k, dungeons):\nglobal answer\nvisited = [0] * len(dungeons)\ndfs(k, 0, dungeons, visited)\nreturn answer</p>","frontmatter":{"date":"September 24, 2022","title":"프로그래머스 피로도 python","categories":"알고리즘","author":"째하","emoji":"🧢"},"fields":{"slug":"/Algorithm/pro_lve2_2/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://JaehaSS.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/Algorithm/pro_lv2_3/","nextSlug":"/Algorithm/pro_lve2_2/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}